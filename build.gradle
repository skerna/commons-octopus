buildscript {

    repositories {
        jcenter()
        mavenCentral()
        google()
        maven { url 'http://oss.sonatype.org/content/repositories/snapshots' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://kotlin.bintray.com/kotlinx/" }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
    }
}

plugins {
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
    id "com.jfrog.bintray" version "1.8.4"

}
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    sourceSets {
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"
    api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinSerialization"
    api "io.ktor:ktor-client-android:$ktorClientVersion"
    api "io.skerna.libs:commons-sreaction-jvm:$skernaVersion"
    api "io.skerna.libs:commons-logger-jvm:$skernaVersion"


    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
    testImplementation("androidx.test:core:1.1.0")
    testImplementation("androidx.test:runner:1.1.0")
    testImplementation("androidx.test.ext:junit:1.0.0")
    testImplementation("androidx.test.espresso:espresso-intents:3.1.0")
    testImplementation("androidx.test.espresso:espresso-core:3.1.0")
    testImplementation("androidx.test.ext:truth:1.0.0")
    testImplementation ("org.robolectric:robolectric:4.0")
}
configurations {
    compileClasspath
}

repositories{
    mavenLocal()
    google()
    jcenter()
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url "https://kotlin.bintray.com/kotlin-dev" }
    maven { url "https://kotlin.bintray.com/js-externals" }
    maven { url  "https://dl.bintray.com/skerna/maven" }
}
kotlin {
    jvm ()
    android()
    jvm {
        compilations.main.kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.js, 'js')
        fromPreset(presets.android, 'android')

        // For ARM, preset should be changed to presets.iosArm32 or presets.iosArm64
        // For Linux, preset should be changed to e.g. presets.linuxX64
        // For MacOS, preset should be changed to e.g. presets.macosX64
        //fromPreset(presets.linuxX64, 'linux')
    }
    sourceSets {

        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$kotlinCoroutinesVersion"
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$kotlinSerialization"
                api "io.ktor:ktor-client-core:$ktorClientVersion"
                api "io.skerna.libs:commons-sreaction-metadata:$skernaVersion"
                api "io.skerna.libs:commons-logger-metadata:$skernaVersion"

            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
            
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinSerialization"
                api "io.ktor:ktor-client-core-jvm:$ktorClientVersion"
                api "io.ktor:ktor-client-okhttp:$ktorClientVersion"
                api "io.skerna.libs:commons-sreaction-jvm:$skernaVersion"
                api "io.skerna.libs:commons-logger-jvm:$skernaVersion"
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
            }
        }
        jsMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlinVersion"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$kotlinCoroutinesVersion"
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$kotlinSerialization"
                api "io.ktor:ktor-client-core-js:$ktorClientVersion"
                api "io.skerna.libs:commons-sreaction-js:$skernaVersion"
                api "io.skerna.libs:commons-logger-js:$skernaVersion"
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }
        androidMain {
            dependencies{
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinSerialization"
                api "io.ktor:ktor-client-core-jvm:$ktorClientVersion"
                api "io.ktor:ktor-client-android:$ktorClientVersion"
                api "io.skerna.libs:commons-sreaction-jvm:$skernaVersion"
                api "io.skerna.libs:commons-logger-jvm:$skernaVersion"

            }
        }
        androidTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
                implementation 'org.mockito:mockito-core:2.7.22'
                implementation 'org.mockito:mockito-android:2.7.22'
            }
        }
    }
}


compileKotlinJs {
    kotlinOptions.metaInfo = true
    kotlinOptions.sourceMap = true
    kotlinOptions.moduleKind = 'umd'
    kotlinOptions.sourceMapEmbedSources = 'always'
}
compileTestKotlinJs {
    kotlinOptions.metaInfo = true
    kotlinOptions.sourceMap = true
    kotlinOptions.moduleKind = 'umd'
    kotlinOptions.sourceMapEmbedSources = 'always'
}


def pomConfig = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
    developers {
        developer {
            id 'louiscad'
            name 'Louis CAD'
            email 'louis.cognault@gmail.com'
        }
    }
    scm {
        connection 'https://github.com/LouisCAD/Splitties.git'
        developerConnection 'https://github.com/LouisCAD/Splitties.git'
    }
}



def publicationNames = []
publishing.publications {
    android.libraryVariants.all { variant ->
        if (variant.buildType.name == "debug") return // Prevents publishing debug library

        def flavored = !variant.flavorName.isEmpty()

        /**
         * Translates "_" in flavor names to "-" for artifactIds, because "-" in flavor name is an
         * illegal character, but is well used in artifactId names.
         */
        def variantArtifactId = flavored ? variant.flavorName.replace('_', '-') : project.name

        /**
         * If the javadoc destinationDir wasn't changed per flavor, the libraryVariants would
         * overwrite the javaDoc as all variants would write in the same directory
         * before the last javadoc jar would have been built, which would cause the last javadoc
         * jar to include classes from other flavors that it doesn't include.
         *
         * Yes, tricky.
         *
         * Note that "${buildDir}/docs/javadoc" is the default javadoc destinationDir.
         */
        def javaDocDestDir = file("${buildDir}/docs/javadoc ${flavored ? variantArtifactId : ""}")

        /**
         * Includes
         */
        def sourceDirs = variant.sourceSets.collect {
            it.javaDirectories // Also includes kotlin sources if any.
        }
        def javadoc = task("${variant.name}Javadoc", type: Javadoc) {
            description "Generates Javadoc for ${variant.name}."
            source = variant.javaCompile.source // Yes, javaCompile is deprecated,
            // but I didn't find any working alternative. Please, tweet @Louis_CAD if you find one.
            destinationDir = javaDocDestDir
            classpath += files(android.getBootClasspath().join(File.pathSeparator))
            classpath += files(configurations.compile)
            options.links("http://docs.oracle.com/javase/7/docs/api/");
            options.links("http://d.android.com/reference/");
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
            failOnError false
        }
        def javadocJar = task("${variant.name}JavadocJar", type: Jar, dependsOn: javadoc) {
            description "Puts Javadoc for ${variant.name} in a jar."
            classifier = 'javadoc'
            from javadoc.destinationDir
        }
        def sourcesJar = task("${variant.name}SourcesJar", type: Jar) {
            description "Puts sources for ${variant.name} in a jar."
            from sourceDirs
            classifier = 'sources'
        }

        def publicationName = "splitties${variant.name.capitalize()}Library"
        publicationNames.add(publicationName)

        "$publicationName"(MavenPublication) {
            artifactId "commons-octopus-android"
            group project.group
            version project.version

            artifact "build/outputs/aar/commons-octopus-release.aar"
            artifact sourcesJar
            artifact javadocJar

            pom {
                packaging 'aar'
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    generatePomDeps(configurations.androidMainImplementation,dependenciesNode)
                    generatePomDeps(configurations.androidMainApi,dependenciesNode)
                }
            }
        }
    }
}
apply from: project.rootProject.file("gradle/maven-metadata.gradle")
apply from: project.rootProject.file("gradle/maven-deps.gradle")
apply from: "./gradle/publish.gradle"



